import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

/*
Для освоения Марса требуется построить исследовательскую базу. База должна 
состоять из n одинаковых модулей, каждый из которых представляет собой прямоугольник.
Каждый модуль представляет собой жилой отсек, который имеет форму прямоугольника 
размером a на b метров. Для повышения надежности модулей инженеры могут добавить вокруг 
каждого модуля слой дополнительной защиты. Толщина этого слоя должна составлять целое 
число метров, и все модули должны иметь одинаковую толщину дополнительной защиты. 
Модуль с защитой, толщина которой равна d метрам, будет иметь форму прямоугольника 
размером (a+2d)(b+2d) метров.
Все модули должны быть расположены на заранее подготовленном прямоугольном поле 
размером wh метров. При этом они должны быть организованы в виде регулярной сетки: 
их стороны должны быть параллельны сторонам поля, и модули должны быть ориентированы одинаково.
Требуется написать программу, которая по заданным количеству и размеру модулей, а также 
размеру поля для их размещения, определяет максимальную толщину слоя дополнительной защиты, 
который можно добавить к каждому модулю.

Формат ввода
Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h 
(1 ≤ n, a, b, w, h ≤ 10**18). Гарантируется, что без дополнительной защиты все модули можно 
разместить в поселении описанным образом.

Формат вывода
Выходной файл должен содержать одно целое число: максимальную возможную толщину 
дополнительной защиты. Если дополнительную защиту установить не удастся, требуется вывести число 0.
*/

public class Space {

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new
                FileReader("input.txt"));
        FileWriter writer = new FileWriter("output.txt");

        String str = br.readLine();
        String[] arr = str.split(" ");
        long n = Long.parseLong(arr[0]);
        long a = Long.parseLong(arr[1]);
        long b = Long.parseLong(arr[2]);
        long w = Long.parseLong(arr[3]);
        long h = Long.parseLong(arr[4]);

        // First case
        long l = 0;
        long r = (Math.min(w-b, h-a)) / 2;
        long d;

        while (l < r) {

            d = (l + r + 1) / 2;
            if ((w/(b+2*d)) * (h/(a+2*d)) < n) {
                r = d - 1;
            } else {
                l = d;
            }
        }

        long possibleResult1 = l;

        // Second case

        l = 0;
        r = (Math.min(w-a, h-b)) / 2;

        while (l < r) {

            d = (l + r + 1) / 2;
            if ((w/(a+2*d)) * (h/(b+2*d)) < n) {
                r = d - 1;
            } else {
                l = d;
            }
        }

        long possibleResult2 = l;

        writer.write(Math.max(possibleResult1, possibleResult2) + "");


        writer.flush();
        writer.close();
    }
}

