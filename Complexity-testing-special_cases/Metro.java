import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;

/*
На некоторых кросс-платформенных станциях метро (как, например, «Третьяковская») на разные стороны платформы
приходят поезда разных направлений. Таня договорилась встретиться с подругой на такой станции, но
поскольку подруга приехала из другого часового пояса, то из-за джетлага сильно проспала, и Тане
пришлось долго её ждать. Поезда всегда ходят точно по расписанию, и Таня знает, что поезд стоит на
платформе ровно одну минуту, а интервал между поездами (время, в течение которого поезда у платформы нет)
составляет a минут для поездов на первом пути и b минут для поездов на втором пути. То есть на первый путь
приезжает поезд и стоит одну минуту, затем в течение a минут поезда у платформы нет, затем в течение
одной минуты у платформы стоит следующий поезд и т. д.
Пока Таня стояла на платформе, она насчитала n поездов на первом пути и m поездов на втором пути.
Определите минимальное и максимальное время, которое Таня могла провести на платформе, или сообщите,
что она точно сбилась со счёта.
Все поезда, которые видела Таня, она наблюдала в течение всей минуты, то есть Таня не приходит и не уходит
с платформы посередине той минуты, когда поезд стоит на платформе.

Формат ввода
Первая строка входных данных содержит число a — интервал между поездами на первом пути. Вторая строка
содержит число b — интервал между поездами на втором пути. Третья строка содержит число n — количество
поездов на первом пути, которые увидела Таня. Четвёртая строка содержит число m — количество поездов
на втором пути, которые увидела Таня. Все числа — целые, от 1 до 1000.

Формат вывода
Программа должна вывести два числа: минимальное и максимальное время в минутах, которое Таня могла
стоять на платформе, или одно число -1, если Таня точно ошиблась.
 */

public class Metro {

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new
                FileReader("input.txt"));
        FileWriter writer = new FileWriter("output.txt");

        String str = br.readLine();
        int a = Integer.parseInt(str);
        str = br.readLine();
        int b = Integer.parseInt(str);
        str = br.readLine();
        int n = Integer.parseInt(str);
        str = br.readLine();
        int m = Integer.parseInt(str);

        // First segment
        int begin1 = n * (a + 1) - a;
        int end1 = n * (a + 1) + a;
        // Second segment
        int begin2 = m * (b + 1) - b;
        int end2 = m * (b + 1) + b;

        Integer result;
        if ((end1 < begin2) || (end2 < begin1)) {
            result = -1;
            writer.write(result.toString());
        } else {
            result = Math.max(begin1, begin2);
            writer.write(result + " ");
            result = Math.min(end1, end2);
            writer.write(result.toString());
        }

        writer.flush();
        writer.close();
    }
}